syntax = "proto3";
package emerald.transaction;
option java_package = "io.emeraldpay.api.transaction.proto";
import "common.proto";

service Transaction {
  rpc GetBalance (BalanceRequest) returns (stream BalanceResponse) {}
  rpc GetAddressTx (AddressTxRequest) returns (stream AddressTxResponse) {}
  rpc SubscribeAddressTx (AddressTxRequest) returns (stream AddressTxResponse) {}
}

message BalanceRequest {
  Asset asset = 1;
  AnyAddress address = 2;
}

message BalanceResponse {
  Asset asset = 1;
  repeated SingleAddress address = 2;
  string balance = 3;
}

message AddressTxRequest {
  ChainRef blockchain = 1;
  AnyAddress address = 2;
  string cursor = 3; // optional
  uint32 limit = 4; // optional

  // For Bitcoin, allows to query all unspent transactions to that address
  bool only_unspent = 5; // default: false
}

message AddressTxResponse {
  string tx_id = 1;
  BlockInfo block = 2;
  bool mempool = 3;
  // N/A for mempool and last blocks (unconfirmed)
  string cursor = 4; // block height + tx index

  bool removed = 5; // true if transaction is removed from blockchain

  repeated Transfer transfers = 6;
}

message Transfer {
  SingleAddress address_from = 1;
  SingleAddress address_to = 2;
  uint64 amount = 3;
  uint64 fee = 4; // currently unimplemented for Bitcoin
  repeated uint32 xpub_indexes = 5; // requested xpub indexes of addresses in transfer
}
